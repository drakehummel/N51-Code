#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<unistd.h>
#include <dirent.h>

#include "server.h"

int main(int argc , char *argv[])
{
	int socket_desc , client_sock , c , read_size;
	struct sockaddr_in server , client;
	char client_message[2000] = {0};
	char client_directory[2000] = {0};
	int num = 1;
	long client_num = 0;
	char* buf = NULL;
	char* fileName = NULL;

//	char* buf = BUFFER_SIZE;

	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}

	server.sin_family = AF_INET;
	server.sin_addr.s_addr = inet_addr("127.0.0.1");
	server.sin_port = htons( 1234 );

	if(setsockopt(socket_desc, SOL_SOCKET, SO_REUSEADDR, &num, sizeof(int)) == -1)
	{
		perror("Server Sock Opt Error");
		return 0;
	}

	if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
	{
		perror("Bind failed. Error");
		return 0;
	}


	listen(socket_desc , 3);


	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);

	client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
	if (client_sock < 0)
	{
		perror("Accept failed");
		return 0;
	}
	puts("Connection accepted");


	do
	{
		recv(client_sock , client_message , BUFFER_SIZE , 0);
		client_num = strtol(client_message, &buf, 10);

		if (client_num == 1)
			{
				FILE *fp;
				fp = fopen("/proc/cpuinfo", "r+");

				if(fp == NULL)
				{
					perror ("CPU Info");
				}

				while(! feof (fp))
				{
					memset(client_message, 0, sizeof(client_message));
					fread(client_message, sizeof(client_message) -1, 1, fp);
					send(client_sock , client_message , strlen(client_message), 0);
				}

				fclose(fp);
			}

		else if (client_num == 2)
			{
				char dname[64];
				DIR *dp;
				dp = opendir ("/proc");
				struct dirent *dirList = readdir(dp);

				while (dirList != NULL)
				{
					memset(client_message, 0, sizeof(client_message));
					if(dirList->d_name [0] >= '0' && dirList->d_name [0] <= '9')
					{
						send(client_sock, dirList->d_name, strlen(dirList->d_name), 0);
						send(client_sock, "      ", 6, 0);
						memset(dname, 0, sizeof(dname));
						sprintf(dname, "/proc/%s/comm", dirList->d_name);

						FILE *fp;
						fp = fopen(dname, "r+");

						if(fp == NULL)
						{
							perror ("Running Processes");
							return 0;
						}

						while(! feof (fp))
						{
							memset(client_message, 0, sizeof(client_message));
							fread(client_message, sizeof(client_message) -1, 1, fp);
							send(client_sock , client_message , strlen(client_message), 0);
						}

						fclose(fp);
						send(client_sock, "\r\n", 2, 0);
					}
					dirList = readdir(dp);
				}

				closedir(dp);
			}

		else if (client_num == 3)
		{
			recv(client_sock, client_directory , BUFFER_SIZE , 0);
			puts(client_directory);
			char dname[64];
			DIR *dp = NULL;
			dp = opendir (client_directory);
			if(dp == NULL)
			{
				perror("Open Directory Failed");
				return 0;
			}
			printf("%p", dp);
			struct dirent *dirList = readdir(dp);

			while (dirList != NULL)
			{
				puts(dirList->d_name);
//				memset(client_message, 0, sizeof(client_message));
//				if(dirList->d_name [0] >= '0' && dirList->d_name [0] <= '9')
//				{
//					send(client_sock, dirList->d_name, strlen(dirList->d_name), 0);
//					send(client_sock, "      ", 6, 0);
//					memset(dname, 0, sizeof(dname));
//					sprintf(dname, "/proc/%s/comm", dirList->d_name);
//
//					FILE *fp;
//					fp = fopen(dname, "r+");
//
//					if(fp == NULL)
//					{
//						perror ("Running Processes");
//					}
//
//					while(! feof (fp))
//					{
//						memset(client_message, 0, sizeof(client_message));
//						fread(client_message, sizeof(client_message) -1, 1, fp);
//						send(client_sock , client_message , strlen(client_message), 0);
//					}
//
//					fclose(fp);
//					send(client_sock, "\r\n", 2, 0);
//				}
				dirList = readdir(dp);
			}

			closedir(dp);
		}

		else if (client_num == 4)
				{
					write(client_sock , client_message , strlen(client_message));
				}

		else if (client_num == 5)
				{
					write(client_sock , "Quitting" , 10);
					break;
				}

		else
				{
					write(client_sock , "Invalid input" , strlen(client_message));
					break;
				}

	}while(client_num != 5);


	if(read_size == 0)
	{
		puts("Client disconnected");
		fflush(stdout);
	}
	else if(read_size == -1)
	{
		perror("Recv failed");
	}

	return 0;
}
