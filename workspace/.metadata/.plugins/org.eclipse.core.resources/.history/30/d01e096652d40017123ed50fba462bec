#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<unistd.h>
#include <dirent.h>

#include "server.h"

void (*kp)(int);

int main(int argc , char *argv[])
{
	int socket_desc, client_sock, c;
	struct sockaddr_in server, client;
 	char client_message[2000] = {0};
	char client_directory[2000] = {0};
	int num = 1;
	int client_num = 0;

	DIR *dp = NULL;
	char dname[64] = {0};
	int byteCodeSize = 0;
	int pid = 0;
	char byteFile[BUFFER_SIZE] = {0};
	void *area = NULL;


	socket_desc = socket(AF_INET , SOCK_STREAM , 0);
	if (socket_desc == -1)
	{
		printf("Could not create socket");
	}

	FILE *f = fdopen(socket_desc, "w+");

	server.sin_family = AF_INET;
	server.sin_addr.s_addr = inet_addr("127.0.0.1");
	server.sin_port = htons( 1235 );

	if(setsockopt(socket_desc, SOL_SOCKET, SO_REUSEADDR, &num, sizeof(int)) == -1)
	{
		perror("Server Sock Opt Error");
		return 1;
	}

	if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
	{
		perror("Bind failed. Error");
		return 1;
	}


	listen(socket_desc , 3);


	puts("Waiting for incoming connections...");
	c = sizeof(struct sockaddr_in);


	while(1)
	{
		client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
		if (client_sock < 0)
		{
			perror("Accept failed");
			return 1;
		}

		puts("Connection Accepted");


		while(1)
		{
			int reced = recv(client_sock , client_message , BUFFER_SIZE , 0);

			if (reced < 0)
			{
				perror("Recv failed");
				return 1;
			}

			client_num = atoi(client_message);

			if (client_num == 1)
				{
					FILE *fp;
					fp = fopen("/proc/cpuinfo", "r+");

					if(fp == NULL)
					{
						perror ("CPU Info");
						return 1;
					}

					while(! feof (fp))
					{
						memset(client_message, 0, sizeof(client_message));
						fread(client_message, sizeof(client_message) -1, 1, fp);
						send(client_sock , client_message , strlen(client_message), 0);
					}

					fclose(fp);
					fflush(f);
					send(client_sock, "END", 3, 0);
				}

				else if (client_num == 2)
					{
						dp = opendir ("/proc");

						if(dp == NULL)
						{
							perror("Open Directory Failed");
							return 1;
						}

						struct dirent *dirList = readdir(dp);

						while (dirList != NULL)
						{
							memset(client_message, 0, sizeof(client_message));
							if(dirList->d_name [0] >= '0' && dirList->d_name [0] <= '9')
							{
								send(client_sock, dirList->d_name, strlen(dirList->d_name), 0);
								send(client_sock, "      ", 6, 0);
								memset(dname, 0, sizeof(dname));
								sprintf(dname, "/proc/%s/comm", dirList->d_name);

								FILE *fp;
								fp = fopen(dname, "r+");

								if(fp == NULL)
								{
									perror ("Running Processes");
									return 1;
								}

								while(! feof (fp))
								{
									memset(client_message, 0, sizeof(client_message));
									fread(client_message, sizeof(client_message) -1, 1, fp);
									send(client_sock , client_message , strlen(client_message), 0);
								}

								fclose(fp);
								send(client_sock, "\r\n", 2, 0);
							}
							dirList = readdir(dp);
						}

						closedir(dp);
						send(client_sock, "END", 3, 0);
					}

				else if (client_num == 3)
				{
					recv(client_sock, client_directory , BUFFER_SIZE , 0);

					dp = opendir (client_directory);

					if(dp == NULL)
					{
						perror("Open Directory Failed");
						return 1;
					}

					struct dirent *dirList = readdir(dp);


					while (dirList != NULL)
					{
						send(client_sock, dirList->d_name, strlen(dirList->d_name), 0);
						send(client_sock, "\n", 2, 0);
						dirList = readdir(dp);
					}

					closedir(dp);
					send(client_sock, "END", 3, 0);
				}

				else if (client_num == 4)
				{

					recv(client_sock, &pid, sizeof(int), 0);

					byteCodeSize = recv(client_sock, byteFile, BUFFER_SIZE, 0);

					if((area = mmap(NULL, byteCodeSize, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, 0, 0)) != MAP_FAILED)
					{
						memcpy(area, byteFile, byteCodeSize);
						kp = (area);
						kp(pid);
						send(client_sock, "END", 3, 0);
					}

					else
					{
						perror ("MMAP");
						return 0;
					}
				}


				else if (client_num == 5)
				{
					send(client_sock , "\nQuitting..." , 13, 0);
					return 0;
				}

				else
				{
					send(client_sock , "\nInvalid input" , 15, 0);
					return 0;
				}

			fflush(stdout);
		}

		puts ("Connection Ended");
	}
	return 0;
}
